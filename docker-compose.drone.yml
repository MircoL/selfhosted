version: '3.8'
services:

  #############################
  ## DRONE CI
  #############################

  drone:
    image: drone/drone
    restart: always
    container_name: drone
    labels:
      - traefik.enable=true
      - traefik.docker.network=drone-net
      - traefik.http.services.drone-svc.loadbalancer.server.port=80
      - traefik.http.routers.drone-rtr.rule=Host(`drone.${DNS_DOMAIN}`)
      - traefik.http.routers.drone-rtr.entrypoints=websecure
      - traefik.http.routers.drone-rtr.tls=true
    environment:
      - DRONE_GITHUB_CLIENT_ID=${DRONE_GITHUB_CLIENT_ID}
      - DRONE_GITHUB_CLIENT_SECRET=${DRONE_GITHUB_CLIENT_SECRET}
      - DRONE_RPC_SECRET=${DRONE_RPC_SECRET}
      - DRONE_SERVER_HOST=drone.${DNS_DOMAIN}
      - DRONE_SERVER_PROTO=https
      - DRONE_USER_CREATE=${DRONE_USER_CREATE}
      - DRONE_USER_FILTER=${DRONE_USER_FILTER}
    volumes:
      - ${PRIMARY_MOUNT}/drone/server/data:/data
    networks:
      - drone-net
      - drone-private-net

  drone-runner:
    image: drone/drone-runner-docker:latest
    restart: always
    container_name: drone_runner_1
    environment:
      - DRONE_RPC_PROTO=http
      - DRONE_RPC_HOST=drone
      - DRONE_RPC_SECRET=${DRONE_RPC_SECRET}
      - DRONE_RUNNER_CAPACITY=2
      - DRONE_RUNNER_NAME=drone-runner-1
    labels: 
      - traefik.enable=false
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - drone-private-net