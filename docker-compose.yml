version: '3.8'
services:

  #############################
  ## ADGUARD
  #############################

  adguard:
    image: adguard/adguardhome:latest
    container_name: adguardhome
    restart: always
    labels:
      - traefik.enable=true
      - traefik.docker.network=adguard-net
      - traefik.http.services.adguard.loadbalancer.server.port=80
      - traefik.http.middlewares.adguard-https.redirectscheme.scheme=https
      - traefik.http.routers.adguard.entrypoints=web
      - traefik.http.routers.adguard.rule=Host(`adguard.${DNS_DOMAIN}`)
      - traefik.http.routers.adguard.middlewares=adguard-https@docker
      - traefik.http.routers.adguard-secure.entrypoints=websecure
      - traefik.http.routers.adguard-secure.rule=Host(`adguard.${DNS_DOMAIN}`)
      - traefik.http.routers.adguard-secure.tls.domains[0].main=*.${DNS_DOMAIN}
      - traefik.http.routers.adguard-secure.tls.domains[0].sans=${DNS_DOMAIN}
      - traefik.http.routers.adguard-secure.tls.certresolver=myresolver
      - traefik.http.routers.adguard-secure.tls=true
      - traefik.http.middlewares.adguard-ipwhitelist.ipwhitelist.sourcerange=127.0.0.1/32,${SUBNET}
      - traefik.http.routers.adguard-secure.middlewares=adguard-ipwhitelist@docker
    networks:
      - adguard-net
    ports:
      - "53:53/udp"
      - "53:53/tcp"
    volumes:
      - "${LOCAL_MOUNT}/adguard/data:/opt/adguardhome/work"
      - "${LOCAL_MOUNT}/adguard/conf:/opt/adguardhome/conf"
    dns: "192.168.1.1"

  #############################
  ## CALIBRE
  #############################

  calibre_web:
    image: linuxserver/calibre-web
    container_name: calibre_web
    restart: always
    labels:
      - traefik.enable=true
      - traefik.docker.network=calibre-net
      - traefik.http.services.calibre.loadbalancer.server.port=8083
      - traefik.http.middlewares.calibre-https.redirectscheme.scheme=https
      - traefik.http.routers.calibre.entrypoints=web
      - traefik.http.routers.calibre.rule=Host(`calibre.${DNS_DOMAIN}`)
      - traefik.http.routers.calibre.middlewares=calibre-https@docker
      - traefik.http.routers.calibre-secure.entrypoints=websecure
      - traefik.http.routers.calibre-secure.rule=Host(`calibre.${DNS_DOMAIN}`)
      - traefik.http.routers.calibre-secure.tls.domains[0].sans=${DNS_DOMAIN}
      - traefik.http.routers.calibre-secure.tls.domains[0].main=*.${DNS_DOMAIN}
      - traefik.http.routers.calibre-secure.tls.certresolver=myresolver
      - traefik.http.routers.calibre-secure.tls=true
    environment:
      - PUID=0
      - PGID=0
      - "TZ=${TIME_ZONE}"
      - "DOCKER_MODS=linuxserver/calibre-web:calibre"
    volumes:
      - ${PRIMARY_MOUNT}/calibre/config:/config
      - ${PRIMARY_MOUNT}/calibre/books:/books
    networks:
      - calibre-net
  
  #############################
  ## CLOUDFLARE
  #############################

  cloudflare:
    image: oznu/cloudflare-ddns
    restart: always
    container_name: cloudflare
    labels:
      - traefik.enable=false
    environment:
      - "API_KEY=${CF_TOKEN}"
      - "ZONE=${DNS_DOMAIN}"
      - "SUBDOMAIN=${SUBDOMAIN}"
    networks:
      - cloudflare-net

  #############################
  ## DRONE CI
  #############################

  drone:
    image: drone/drone
    restart: always
    container_name: drone
    labels:
      - traefik.enable=true
      - traefik.docker.network=drone-net
      - traefik.http.services.drone.loadbalancer.server.port=80
      - traefik.http.middlewares.drone-https.redirectscheme.scheme=https
      - traefik.http.routers.drone.entrypoints=web
      - traefik.http.routers.drone.rule=Host(`drone.${DNS_DOMAIN}`)
      - traefik.http.routers.drone.middlewares=drone-https@docker
      - traefik.http.routers.drone-secure.entrypoints=websecure
      - traefik.http.routers.drone-secure.rule=Host(`drone.${DNS_DOMAIN}`)
      - traefik.http.routers.drone-secure.tls.domains[0].main=*.${DNS_DOMAIN}
      - traefik.http.routers.drone-secure.tls.domains[0].sans=${DNS_DOMAIN}
      - traefik.http.routers.drone-secure.tls.certresolver=myresolver
      - traefik.http.routers.drone-secure.tls=true
    environment:
      - DRONE_GITHUB_CLIENT_ID=${DRONE_GITHUB_CLIENT_ID}
      - DRONE_GITHUB_CLIENT_SECRET=${DRONE_GITHUB_CLIENT_SECRET}
      - DRONE_RPC_SECRET=${DRONE_RPC_SECRET}
      - DRONE_SERVER_HOST=drone.${DNS_DOMAIN}
      - DRONE_SERVER_PROTO=https
      - DRONE_USER_CREATE=${DRONE_USER_CREATE}
      - DRONE_USER_FILTER=${DRONE_USER_FILTER}
    volumes:
      - ${PRIMARY_MOUNT}/drone/server/data:/data
    networks:
      - drone-net

  drone-runner:
    image: drone/drone-runner-docker:latest
    restart: always
    container_name: drone_runner_1
    environment:
      - DRONE_RPC_PROTO=https
      - DRONE_RPC_HOST=drone.${DNS_DOMAIN}
      - DRONE_RPC_SECRET=${DRONE_RPC_SECRET}
      - DRONE_RUNNER_CAPACITY=2
      - DRONE_RUNNER_NAME=drone-runner-1
    labels: 
      - traefik.enable=true
      - traefik.docker.network=drone-net
      - traefik.http.services.drone-runner-1.loadbalancer.server.port=3000
      - traefik.http.middlewares.drone-runner-1-https.redirectscheme.scheme=https
      - traefik.http.routers.drone-runner-1.entrypoints=web
      - traefik.http.routers.drone-runner-1.rule=Host(`drone-runner-1.${DNS_DOMAIN}`)
      - traefik.http.routers.drone-runner-1.middlewares=drone-runner-1-https@docker
      - traefik.http.routers.drone-runner-1-secure.entrypoints=websecure
      - traefik.http.routers.drone-runner-1-secure.rule=Host(`drone-runner-1.${DNS_DOMAIN}`)
      - traefik.http.routers.drone-runner-1-secure.tls.domains[0].main=*.${DNS_DOMAIN}
      - traefik.http.routers.drone-runner-1-secure.tls.domains[0].sans=${DNS_DOMAIN}
      - traefik.http.routers.drone-runner-1-secure.tls.certresolver=myresolver
      - traefik.http.routers.drone-runner-1-secure.tls=true
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

  #############################
  ## DUPLICATI
  #############################

  duplicati:
    image: linuxserver/duplicati
    container_name: duplicati
    restart: always
    labels:
      - traefik.enable=true
      - traefik.docker.network=duplicati-net
      - traefik.http.services.duplicati.loadbalancer.server.port=8200
      - traefik.http.middlewares.duplicati-basic.basicauth.usersfile=/basicauth/passwords.txt
      - traefik.http.middlewares.duplicati-https.redirectscheme.scheme=https
      - traefik.http.routers.duplicati.entrypoints=web
      - traefik.http.routers.duplicati.rule=Host(`backups.${DNS_DOMAIN}`)
      - traefik.http.routers.duplicati.middlewares=duplicati-https@docker
      - traefik.http.routers.duplicati-secure.entrypoints=websecure
      - traefik.http.routers.duplicati-secure.rule=Host(`backups.${DNS_DOMAIN}`)
      - traefik.http.routers.duplicati-secure.tls.domains[0].sans=${DNS_DOMAIN}
      - traefik.http.routers.duplicati-secure.tls.certresolver=myresolver
      - traefik.http.routers.duplicati-secure.tls=true
      - traefik.http.middlewares.duplicati-ipwhitelist.ipwhitelist.sourcerange=127.0.0.1/32,${SUBNET}
      - traefik.http.routers.duplicati-secure.middlewares=duplicati-basic@docker,duplicati-ipwhitelist@docker
    environment:
      - "TZ=${TIME_ZONE}"
      - "PUID=0"
      - "PGID=0"
    volumes:
      - ${PRIMARY_MOUNT}:/sources/primary
      - ${LOCAL_MOUNT}:/sources/local
      - ${SECONDARY_MOUNT}/duplicati/config:/config
      - ${SECONDARY_MOUNT}/duplicati/backups:/backups
    networks:
      - duplicati-net

  #############################
  ## JACKETT
  #############################

  jackett:
    image: linuxserver/jackett
    container_name: jackett
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TIME_ZONE}
      - AUTO_UPDATE=true
    volumes:
      - ${PRIMARY_MOUNT}/jackett/config:/config
      - ${PRIMARY_MOUNT}/plex/media/watch:/downloads
    labels:
      - traefik.enable=true
      - traefik.docker.network=jackett-net
      - traefik.http.services.jackett.loadbalancer.server.port=9117
      - traefik.http.middlewares.jackett-basic.basicauth.usersfile=/basicauth/passwords.txt
      - traefik.http.middlewares.jackett-https.redirectscheme.scheme=https
      - traefik.http.routers.jackett.entrypoints=web
      - traefik.http.routers.jackett.rule=Host(`jackett.${DNS_DOMAIN}`)
      - traefik.http.routers.jackett.middlewares=jackett-https@docker
      - traefik.http.routers.jackett-secure.entrypoints=websecure
      - traefik.http.routers.jackett-secure.rule=Host(`jackett.${DNS_DOMAIN}`)
      - traefik.http.routers.jackett-secure.middlewares=jackett-basic@docker
      - traefik.http.routers.jackett-secure.tls.domains[0].main=*.${DNS_DOMAIN}
      - traefik.http.routers.jackett-secure.tls.domains[0].sans=${DNS_DOMAIN}
      - traefik.http.routers.jackett-secure.tls.certresolver=myresolver
      - traefik.http.routers.jackett-secure.tls=true
    restart: always
    networks:
      - jackett-net

  #############################
  ## KOBODL
  #############################

  kobodl:
    image: subdavis/kobodl
    container_name: kobodl
    restart: always
    labels:
      - traefik.enable=true
      - traefik.docker.network=seafile-net
      - traefik.http.services.kobodl.loadbalancer.server.port=5000
      - traefik.http.middlewares.kobodl-basic.basicauth.usersfile=/basicauth/passwords.txt
      - traefik.http.middlewares.kobodl-https.redirectscheme.scheme=https
      - traefik.http.routers.kobodl.entrypoints=web
      - traefik.http.routers.kobodl.rule=Host(`kobodl.${DNS_DOMAIN}`)
      - traefik.http.routers.kobodl.middlewares=kobodl-https@docker
      - traefik.http.routers.kobodl-secure.entrypoints=websecure
      - traefik.http.routers.kobodl-secure.rule=Host(`kobodl.${DNS_DOMAIN}`)
      - traefik.http.routers.kobodl-secure.middlewares=kobodl-basic@docker
      - traefik.http.routers.kobodl-secure.tls.domains[0].main=*.${DNS_DOMAIN}
      - traefik.http.routers.kobodl-secure.tls.domains[0].sans=${DNS_DOMAIN}
      - traefik.http.routers.kobodl-secure.tls.certresolver=myresolver
      - traefik.http.routers.kobodl-secure.tls=true
    volumes:
      - ${PRIMARY_MOUNT}/kobodl/kobodl.json:/home/kobodl.json
      - ${PRIMARY_MOUNT}/kobodl/downloads:/home/downloads
    command: --config /home/kobodl.json serve -h 0.0.0.0 --output-dir /home/downloads
    networks:
      - seafile-net

  #############################
  ## MINIO
  #############################

  minio:
    image: minio/minio
    container_name: minio
    restart: always
    command: server /data
    labels:
      - traefik.enable=true
      - traefik.docker.network=minio-net
      - traefik.http.services.minio.loadbalancer.server.port=9000
      - traefik.http.middlewares.minio-https.redirectscheme.scheme=https
      - traefik.http.routers.minio.entrypoints=web
      - traefik.http.routers.minio.rule=Host(`minio.${DNS_DOMAIN}`)
      - traefik.http.routers.minio.middlewares=minio-https@docker
      - traefik.http.routers.minio-secure.entrypoints=websecure
      - traefik.http.routers.minio-secure.rule=Host(`minio.${DNS_DOMAIN}`)
      - traefik.http.routers.minio-secure.tls.domains[0].main=*.${DNS_DOMAIN}
      - traefik.http.routers.minio-secure.tls.domains[0].sans=${DNS_DOMAIN}
      - traefik.http.routers.minio-secure.tls.certresolver=myresolver
      - traefik.http.routers.minio-secure.tls=true
    volumes:
      - ${PRIMARY_MOUNT}:/data
    environment:
      - "MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY}"
      - "MINIO_SECRET_KEY=${MINIO_SECRET_KEY}"
    networks:
      - minio-net

  #############################
  ## PLEX
  #############################

  plex:
    image: plexinc/pms-docker:beta
    container_name: plex
    restart: always
    init: true
    labels:
      - traefik.enable=true
      - traefik.docker.network=plex-net
      - traefik.http.services.plex.loadbalancer.server.port=32400
      - traefik.http.middlewares.plex-https.redirectscheme.scheme=https
      - traefik.http.routers.plex.entrypoints=web
      - traefik.http.routers.plex.rule=Host(`plex.${DNS_DOMAIN}`)
      - traefik.http.routers.plex.middlewares=plex-https@docker
      - traefik.http.routers.plex-secure.entrypoints=websecure
      - traefik.http.routers.plex-secure.rule=Host(`plex.${DNS_DOMAIN}`)
      - traefik.http.routers.plex-secure.tls.domains[0].main=*.${DNS_DOMAIN}
      - traefik.http.routers.plex-secure.tls.domains[0].sans=${DNS_DOMAIN}
      - traefik.http.routers.plex-secure.tls.certresolver=myresolver
      - traefik.http.routers.plex-secure.tls=true
    ports:
      - "32400:32400/tcp"
      - "8324:8324/tcp"
    environment:
      - TZ="${TIME_ZONE}"
      - ADVERTISE_IP="https://plex.${DNS_DOMAIN}/"
      - PLEX_CLAIM="${PLEX_CLAIM}"
    volumes:
      - ${PRIMARY_MOUNT}/plex/config:/config
      - /tmp/plex/transcode:/transcode
      - ${PRIMARY_MOUNT}/plex/media:/data
    networks:
      - plex-net

  #############################
  ## PORTAINER
  #############################

  portainer:
    image: portainer/portainer-ce
    restart: always
    container_name: portainer
    labels:
      - traefik.enable=true
      - traefik.docker.network=portainer-net
      - traefik.http.services.portainer.loadbalancer.server.port=9000
      - traefik.http.middlewares.portainer-https.redirectscheme.scheme=https
      - traefik.http.routers.portainer.entrypoints=web
      - traefik.http.routers.portainer.rule=Host(`portainer.${DNS_DOMAIN}`)
      - traefik.http.routers.portainer.middlewares=portainer-https@docker
      - traefik.http.routers.portainer-secure.entrypoints=websecure
      - traefik.http.routers.portainer-secure.rule=Host(`portainer.${DNS_DOMAIN}`)
      - traefik.http.routers.portainer-secure.tls.domains[0].main=*.${DNS_DOMAIN}
      - traefik.http.routers.portainer-secure.tls.certresolver=myresolver
      - traefik.http.routers.portainer-secure.tls=true
      - traefik.http.middlewares.portainer-ipwhitelist.ipwhitelist.sourcerange=127.0.0.1/32,${SUBNET}
      - traefik.http.routers.portainer-secure.middlewares=portainer-ipwhitelist@docker
    volumes:
      - ${PRIMARY_MOUNT}/portainer/data/:/data
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - portainer-net

  #############################
  ## SAMBA
  #############################

  samba:
    image: dperson/samba
    container_name: samba
    restart: always
    labels:
      - traefik.enable=false
    ports:
      - "445:445"
    environment:
      - TZ=EST5EDT
      - "USER=${SAMBA_USER};${SAMBA_PASSWORD}"
      - "SHARE=data;/mount;yes;no;no;${SAMBA_USER};${SAMBA_USER};;"
    volumes:
      - /media:/mount
    networks:
      - samba-net

  #############################
  ## SEAFILE 
  #############################

  # from https://download.seafile.com/d/320e8adf90fa43ad8fee/files/?p=/docker/pro-edition/docker-compose.yml
  # https://download.seafile.com/published/seafile-manual/docker/pro-edition/Deploy%20Seafile-pro%20with%20Docker.md

  seafile_db:
    image: mariadb:10.1
    container_name: seafile-mariadb
    restart: always
    labels:
      - traefik.enable=false
    environment:
      - "MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}"  # Requested, set the root's password of MySQL service.
      - MYSQL_LOG_CONSOLE=true
    volumes:
      - ${PRIMARY_MOUNT}/mariadb:/var/lib/mysql  # Requested, specifies the path to MySQL data persistent store.
    networks:
      - seafile-net

  seafile_memcached:
    image: memcached:1.5.6
    container_name: seafile-memcached
    restart: always
    labels:
      - traefik.enable=false
    entrypoint: memcached -m 256
    networks:
      - seafile-net

  seafile_elasticsearch:
    image: seafileltd/elasticsearch-with-ik:5.6.16
    container_name: seafile-elasticsearch
    restart: always
    labels:
      - traefik.enable=false
    environment:
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
      - "TAKE_FILE_OWNERSHIP=1"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    mem_limit: 2g
    volumes:
      # Requested, specifies the path to Elasticsearch data persistent store.
      - ${LOCAL_MOUNT}/elasticsearch/data:/usr/share/elasticsearch/data
    networks:
      - seafile-net

  seafile:
    image: docker.seadrive.org/seafileltd/seafile-pro-mc:latest
    container_name: seafile
    restart: always
    links:
      - seafile_elasticsearch:elasticsearch
      - seafile_db:mariadb
    labels:
      - traefik.enable=true
      - traefik.docker.network=seafile-net
      - traefik.http.services.seafile.loadbalancer.server.port=80
      - traefik.http.middlewares.seafile-https.redirectscheme.scheme=https
      - traefik.http.routers.seafile.entrypoints=web
      - traefik.http.routers.seafile.rule=Host(`seafile.${DNS_DOMAIN}`)
      - traefik.http.routers.seafile.middlewares=seafile-https@docker
      - traefik.http.routers.seafile-secure.entrypoints=websecure
      - traefik.http.routers.seafile-secure.rule=Host(`seafile.${DNS_DOMAIN}`)
      - traefik.http.routers.seafile-secure.tls.domains[0].main=*.${DNS_DOMAIN}
      - traefik.http.routers.seafile-secure.tls.domains[0].sans=${DNS_DOMAIN}
      - traefik.http.routers.seafile-secure.tls.certresolver=myresolver
      - traefik.http.routers.seafile-secure.tls=true
    volumes:
      - ${PRIMARY_MOUNT}/seafile:/shared # Requested, specifies the path to Seafile data persistent store.
      - ${PRIMARY_MOUNT}/data:/source_data
    environment:
      - "TIME_ZONE=${TIME_ZONE}"
      - "DB_HOST=mariadb"
      - "DB_ROOT_PASSWD=${MYSQL_ROOT_PASSWORD}" # Requested, the value shuold be root's password of MySQL service.
      - "SEAFILE_ADMIN_EMAIL=${SEAFILE_ADMIN_EMAIL}" # Specifies Seafile admin user, default is 'me@example.com'
      - "SEAFILE_ADMIN_PASSWORD=${SEAFILE_ADMIN_PASSWORD}"  # Specifies Seafile admin password, default is 'asecret'
      - "SEAFILE_SERVER_LETSENCRYPT=false"  # Whether to use https or not
      - "SEAFILE_SERVER_HOSTNAME=seafile.${DNS_DOMAIN}" # Specifies your host name if https is enabled
    depends_on:
      - seafile_db
      - seafile_memcached
      - seafile_elasticsearch
    networks:
      - seafile-net

  #############################
  ## TRANSMISSION_TORRENT
  #############################

  transmission:
    image: haugene/transmission-openvpn
    container_name: transmission
    restart: always
    labels: 
      - traefik.enable=false
    networks:
      - transmission-net
    dns: 1.1.1.1
    cap_add:
      - NET_ADMIN
    devices:
      - /dev/net/tun
    volumes:
      - ${PRIMARY_MOUNT}/plex/media/:/data
      - /etc/localtime:/etc/localtime:ro
    environment:
      - CREATE_TUN_DEVICE=true
      - "OPENVPN_PROVIDER=${OPENVPN_PROVIDER}"
      - "OPENVPN_USERNAME=${TORRENT_USERNAME}"
      - "OPENVPN_PASSWORD=${TORRENT_PASSWORD}"
      - "TRANSMISSION_UMASK=0"
      - "OPENVPN_OPTS=--inactive 3600 --ping 10 --ping-exit 60"
      - LOCAL_NETWORK=192.168.1.1/24

  transmission_proxy:
    image: haugene/transmission-openvpn-proxy
    container_name: transmission_proxy
    restart: always
    labels:
      - traefik.enable=true
      - traefik.docker.network=transmission-net
      - traefik.http.services.transmission.loadbalancer.server.port=8080
      - traefik.http.middlewares.transmission-basic.basicauth.usersfile=/basicauth/passwords.txt
      - traefik.http.middlewares.transmission-https.redirectscheme.scheme=https
      - traefik.http.routers.transmission.entrypoints=web
      - traefik.http.routers.transmission.rule=Host(`torrent.${DNS_DOMAIN}`)
      - traefik.http.routers.transmission.middlewares=transmission-https@docker
      - traefik.http.routers.transmission-secure.entrypoints=websecure
      - traefik.http.routers.transmission-secure.rule=Host(`torrent.${DNS_DOMAIN}`)
      - traefik.http.routers.transmission-secure.middlewares=transmission-basic@docker
      - traefik.http.routers.transmission-secure.tls.domains[0].main=*.${DNS_DOMAIN}
      - traefik.http.routers.transmission-secure.tls.domains[0].sans=${DNS_DOMAIN}
      - traefik.http.routers.transmission-secure.tls.certresolver=myresolver
      - traefik.http.middlewares.transmission-ipwhitelist.ipwhitelist.sourcerange=127.0.0.1/32,${SUBNET}
      - traefik.http.routers.transmission-secure.middlewares=transmission-ipwhitelist@docker
      - traefik.http.routers.transmission-secure.tls=true
    depends_on:
      - transmission
    networks:
      - transmission-net

  #############################
  ## TRAEFIK
  #############################

  traefik:
    image: traefik:v2.3
    restart: always
    container_name: traefik
    command: >
      --api.insecure=true
      --accesslog=true
      --accesslog.filepath=/var/log/traefik/access.log
      --accesslog.fields.headers.names.Content-Type=keep
      --accesslog.fields.headers.names.Referer=keep
      --accesslog.fields.headers.names.User-Agent=keep
      --providers.docker=true
      --providers.docker.exposedByDefault=false
      --entrypoints.web.address=:80
      --entrypoints.websecure.address=:443
      --certificatesResolvers.myresolver.acme.caServer="https://acme-v02.api.letsencrypt.org/directory"
      --certificatesresolvers.myresolver.acme.dnschallenge=true
      --certificatesresolvers.myresolver.acme.dnschallenge.provider=cloudflare
      --certificatesresolvers.myresolver.acme.email="${LETSENCRYPT_EMAIL}"
      --certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json
    environment:
      - CF_API_EMAIL=${CF_EMAIL}
      - CF_DNS_API_TOKEN=${CF_TOKEN}
      - CF_ZONE_API_TOKEN=${CF_TOKEN}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - "./etc/passwords.txt:/basicauth/passwords.txt"
      - "${LOCAL_MOUNT}/traefik/letsencrypt:/letsencrypt"
      - "${LOCAL_MOUNT}/traefik/logs:/var/log/traefik"
    ports:
      - "9999:8080"
      - "80:80"
      - "443:443"
    networks:
      - traefik-net
      - adguard-net
      - calibre-net
      - drone-net
      - duplicati-net
      - jackett-net
      - kobodl-net
      - minio-net
      - plex-net
      - portainer-net
      - seafile-net
      - transmission-net
      - zoneminder-net

  #############################
  ## UNIFI CONTROLLER
  #############################

  unifi_controller:
    image: linuxserver/unifi-controller
    container_name: unifi_controller
    restart: always
    labels:
      - traefik.enable=false
    environment:
      - PUID=1000
      - PGID=1000
      - MEM_LIMIT=1024M
    ports:
      - "3478:3478/udp"
      - "10001:10001/udp"
      - "8080:8080"
      - "8081:8081"
      - "8443:8443"
      - "6789:6789"
    volumes:
      - "${PRIMARY_MOUNT}/unifi/config/:/config"
    networks:
      - unifi-net

  #############################
  ## WATCHTOWER
  #############################

  watchtower:
    image: containrrr/watchtower
    container_name: watchtower
    restart: always
    command: --schedule "0 0 */6 * * *"
    labels:
      - traefik.enable=false
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - "${PRIMARY_MOUNT}/watchtower/config/:/config"

  #############################
  ## WIREGUARD
  #############################

  wireguard:
    image: linuxserver/wireguard
    restart: always
    container_name: wireguard
    labels:
      - traefik.enable=false
    cap_add:
      - NET_ADMIN
      - SYS_MODULE
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TIME_ZONE}
      - SERVERURL="wireguard.${DNS_DOMAIN}"
      - SERVERPORT=51820
      - PEERS=2
      - PEERDNS=192.168.1.175
      - INTERNAL_SUBNET=10.13.13.0
    ports:
      - "54155:51820/udp"
    volumes:
      - ${PRIMARY_MOUNT}/wireguard/config:/config
      - /lib/modules:/lib/modules
    sysctls:
      - "net.ipv4.ip_forward=1"
      - "net.ipv4.conf.all.src_valid_mark=1"
      - "net.ipv4.conf.all.rp_filter=2"
    networks:
      wireguard-net:
      wireguard-peer1-net:
        ipv4_address: 10.0.13.2 

  #############################
  ## ZONEMINDER
  #############################

  zoneminder:
    container_name: zoneminder
    image: dlandon/zoneminder:latest
    restart: always
    shm_size: '2gb'
    depends_on:
      - wireguard
    labels:
      - traefik.enable=true
      - traefik.docker.network=zoneminder-net
      - traefik.http.services.zoneminder.loadbalancer.server.port=80
      - traefik.http.middlewares.zoneminder-https.redirectscheme.scheme=https
      - traefik.http.routers.zoneminder.entrypoints=web
      - traefik.http.routers.zoneminder.rule=Host(`cameras.${DNS_DOMAIN}`)
      - traefik.http.routers.zoneminder.middlewares=zoneminder-https@docker
      - traefik.http.routers.zoneminder-secure.entrypoints=websecure
      - traefik.http.routers.zoneminder-secure.rule=Host(`cameras.${DNS_DOMAIN}`)
      - traefik.http.routers.zoneminder-secure.tls.domains[0].main=*.${DNS_DOMAIN}
      - traefik.http.routers.zoneminder-secure.tls.domains[0].sans=${DNS_DOMAIN}
      - traefik.http.routers.zoneminder-secure.tls.certresolver=myresolver
      - traefik.http.routers.zoneminder-secure.tls=true
    environment:
      - TZ=${TIME_ZONE}
      - PUID=99
      - PGID=100
      - INSTALL_HOOK=0
      - INSTALL_FACE=0
      - INSTALL_TINY_YOLOV3=0
      - INSTALL_YOLOV3=0
      - INSTALL_TINY_YOLOV4=0
      - INSTALL_YOLOV4=0
      - MULTI_PORT_START=0
      - MULTI_PORT_END=0
    volumes:
      - ${PRIMARY_MOUNT}/zoneminder/config:/config:rw
      - ${SECONDARY_MOUNT}/zoneminder:/var/cache/zoneminder:rw
    networks:
      - zoneminder-net
      - wireguard-peer1-net

networks:
  adguard-net:
    name: adguard-net
  calibre-net:
    name: calibre-net
  cloudflare-net:
    name: cloudflare-net
  drone-net:
    name: drone-net
  duplicati-net:
    name: duplicati-net
  jackett-net:
    name: jackett-net
  kobodl-net:
    name: kobodl-net
  minio-net:
    name: minio-net
  plex-net:
    name: plex-net
  portainer-net:
    name: portainer-net
  samba-net:
    name: samba-net
  seafile-net:
    name: seafile-net
  transmission-net:
    name: transmission-net
  traefik-net:
    name: traefik-net
  unifi-net:
    name: unifi-net
  wireguard-net:
    name: wireguard-net
  wireguard-peer1-net:
    name: wireguard-peer1-net
    internal: true
    ipam:
      config:
        - subnet: "10.0.13.0/24"
  zoneminder-net:
    name: zoneminder-net
